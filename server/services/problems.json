{
  "data": [
    {
      "id": "66367f5e0d552cf0a90e85e9",
      "title": "Two Sum",
      "acceptanceRate": 52.4,
      "accepted": 12.9,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/12345",
        "username": "PrimeTimeTran"
      },
      "body": "Given an array of integers and a target value, determine if there are two numbers that add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/9876",
        "username": "PrimeTimeTran"
      },
      "editorialBody": "Solutions include a brute force approach, using a hash table for efficient lookups, or sorting with two pointers.",
      "editorialRating": 4.5,
      "editorialVotes": { "1": 5, "2": 4 },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 1,
      "similar": [{ "difficulty": "Medium", "id": 2, "title": "3 Sum" }],
      "submissions": 24.6,
      "testCases": [
        { "output": [0, 1], "explanation": "", "input": [[2, 7, 11, 15], 9] },
        { "output": [1, 2], "explanation": "", "input": [[3, 2, 4], 6] },
        { "output": [0, 1], "explanation": "", "input": [[3, 3], 6] }
      ],
      "topics": [{ "name": "Array" }, { "name": "Hash Table" }],
      "signature": {
        "parameters": [
          { "type": "List[int]", "name": "nums" },
          { "type": "int", "name": "target" }
        ],
        "returnType": "List[int]"
      }
    },
    {
      "id": "66367f5e0d552cf0a90e8609",
      "title": "Longest Substring Without Repeating Characters",
      "body": "Given a string s, find the length of the longest substring without repeating characters.",
      "acceptanceRate": 35.2,
      "accepted": 5.9,
      "submissions": 16.8,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "PrimeTimeTran"
      },
      "difficulty": "Medium",
      "frequency": "High",
      "constraints": [],
      "hints": [
        "Use a sliding window approach.",
        "Try using a set to store characters.",
        "When a duplicate character is found, move the left pointer."
      ],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 3,
      "topics": [
        { "name": "Hash Table" },
        { "name": "String" },
        { "name": "Sliding Window" }
      ],
      "similar": [
        {
          "id": 159,
          "title": "Longest Substring with At Most Two Distinct Characters",
          "difficulty": "Medium"
        },
        { "id": 76, "title": "Minimum Window Substring", "difficulty": "Hard" }
      ],
      "testCases": [
        {
          "input": ["abcabcbb"],
          "output": 3,
          "explanation": "\"abc\" is the longest substring."
        },
        {
          "input": ["bbbbb"],
          "output": 1,
          "explanation": "\"b\" is the longest substring."
        },
        {
          "input": ["pwwkew"],
          "output": 3,
          "explanation": "\"wke\" is the longest substring."
        }
      ],
      "signature": {
        "parameters": [{ "type": "str", "name": "s" }],
        "returnType": "int"
      },
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/6789",
        "username": "PrimeTimeTran"
      },
      "editorialBody": "A sliding window approach using a hash set or a dictionary can efficiently solve this problem in linear time. You maintain a window and slide it forward while ensuring that all characters inside are unique.",
      "editorialRating": 4.7,
      "editorialVotes": { "1": 3, "2": 7 }
    },
    {
      "id": "6844bbfa438d7b9a15caa7cf",
      "title": "Group Anagrams",
      "acceptanceRate": 66.4,
      "accepted": 12.8,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/12345",
        "username": "PrimeTimeTran"
      },
      "body": "Given an array of strings `strs`, group the anagrams together. You can return the answer in any order.\n\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/9876",
        "username": "LC_Solutions"
      },
      "editorialBody": "A common solution involves using a hash map where the key is a representation of the sorted string (or a character frequency tuple), and the value is a list of anagrams. This results in O(n·k log k) time complexity with sorting, or O(n·k) using character count as the key.",
      "editorialRating": 4.8,
      "editorialVotes": { "1": 3, "2": 8 },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 49,
      "similar": [
        { "difficulty": "Easy", "id": 242, "title": "Valid Anagram" }
      ],
      "submissions": 19.3,
      "testCases": [
        {
          "output": [["bat"], ["nat", "tan"], ["ate", "eat", "tea"]],
          "explanation": "",
          "input": [["eat", "tea", "tan", "ate", "nat", "bat"]]
        },
        {
          "output": [[""]],
          "explanation": "",
          "input": [[""]]
        },
        {
          "output": [["a"]],
          "explanation": "",
          "input": [["a"]]
        }
      ],
      "topics": [
        { "name": "Hash Table" },
        { "name": "String" },
        { "name": "Sorting" }
      ],
      "signature": {
        "parameters": [{ "type": "List[str]", "name": "strs" }],
        "returnType": "List[List[str]]"
      }
    },
    {
      "id": "68449561e05ddd247bea6d2d",
      "title": "Contains Duplicate",
      "acceptanceRate": 59.6,
      "accepted": 18.7,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/12345",
        "username": "PrimeTimeTran"
      },
      "body": "Given an integer array `nums`, return `true` if any value appears at least twice in the array, and return `false` if every element is distinct.",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/9876",
        "username": "PrimeTimeTran"
      },
      "editorialBody": "Common solutions include sorting the array and checking neighboring elements, or using a hash set to track seen values for O(n) time complexity.",
      "editorialRating": 4.3,
      "editorialVotes": { "1": 3, "2": 6 },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 217,
      "similar": [
        { "difficulty": "Easy", "id": 136, "title": "Single Number" }
      ],
      "submissions": 31.4,
      "testCases": [
        { "output": true, "explanation": "", "input": [[1, 2, 3, 1]] },
        { "output": false, "explanation": "", "input": [[1, 2, 3, 4]] },
        {
          "output": true,
          "explanation": "",
          "input": [[1, 1, 1, 3, 3, 4, 3, 2, 4, 2]]
        },
        {
          "output": true,
          "explanation": "",
          "input": [[1, 1, 1, 3, 3, 4, 3, 2, 4, 2]]
        }
      ],
      "topics": [
        { "name": "Array" },
        { "name": "Hash Table" },
        { "name": "Sorting" }
      ],
      "signature": {
        "parameters": [{ "type": "List[int]", "name": "nums" }],
        "returnType": "bool"
      }
    },
    {
      "id": "6844ba7876977e14d4795339",
      "title": "Valid Anagram",
      "difficulty": "Easy",
      "frequency": "High",
      "acceptanceRate": 65.5,
      "accepted": 1000,
      "isPublished": true,
      "isSubmitted": true,
      "submissions": 24.6,
      "author": {
        "username": "PrimeTimeTran",
        "urlAvatar": "https://example.com/avatar.jpg"
      },
      "body": "Given two strings s and t, return true if t is an anagram of s, and false otherwise. An anagram is a word or phrase formed by rearranging the letters of another, using all the original letters exactly once.",
      "constraints": [],
      "topics": [{ "name": "Hash Table" }, { "name": "Sorting" }],
      "testCases": [
        { "input": ["anagram", "nagaram"], "output": true, "explanation": "" },
        { "input": ["rat", "car"], "output": false, "explanation": "" },
        { "input": ["", ""], "output": true, "explanation": "" }
      ],
      "hints": [
        "Check that the two strings have the same length",
        "Use a hash table (or Counter) to count characters",
        "Alternatively, sort both strings and compare"
      ],
      "similar": [
        { "id": 1, "title": "Group Anagrams", "difficulty": "Medium" }
      ],
      "editorialAuthor": {
        "username": "PrimeTimeTran",
        "urlAvatar": null
      },
      "editorialBody": "One approach is to check length first. Then either:\n\n1. **Hash‑table counting**: count frequencies of characters in `s`, then decrement with `t`. If any count mismatches, return false.\n\n2. **Sorting**: sort both `s` and `t` and compare equality.\n\nThe hash‑table method runs in O(n) time and uses O(1) extra space for fixed alphabet. The sorting method runs in O(nlogn).",
      "editorialRating": 4.2,
      "editorialVotes": { "1": 8, "2": 3 },
      "numLC": 242,
      "signature": {
        "parameters": [
          { "type": "str", "name": "s" },
          { "type": "str", "name": "t" }
        ],
        "returnType": "bool"
      }
    }
  ]
}
